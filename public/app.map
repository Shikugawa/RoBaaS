{"version":3,"sources":["config/middleware/docker-promise.js","config/routing/container.js","config/swagger.js","app.js"],"names":["Docker","require","docker","dockerPullPromise","name","pull","stream","error","Promise","resolve","reject","module","exports","dockerPromise","express","router","Router","post","req","res","match","catch","containerName","params","then","statusCode","JSON","stringify","json","message","send","swagger","fs","path","getFiles","list","readdirSync","join","__dirname","map","file","swaggerInit","args","apis","log","init","app","container","use","_router","stack","forEach","r","route","next","header","listen"],"mappings":";AAAA,MAAMA,EAASC,QAAQ,aAEjBC,EAAS,IAAIF,EAAO,CACZ,WAAA,yBAGRG,EAAoBC,IACjBC,EAAAA,KAAKD,EAAM,CAACE,EAAQC,IAClB,IAAIC,QAAQ,CAACC,EAASC,KACxBH,GAAOG,EAAOH,GACTD,EAAAA,OAKdK,OAAOC,QAAU,CACTT,KAAAA;;AChBR,MAAMU,EAAgBZ,QAAQ,gCACxBa,EAAUb,QAAQ,WAClBc,EAASD,EAAQE,SAqBvBD,EAAOE,KAAK,gBAAiB,CAACC,EAAKC,KAEd,OAAA,IACdf,GAA8B,OAA9BA,EAAKgB,MAAM,eACJZ,OAAAA,QAAQE,OAAO,uCAIlBJ,aAFcO,EAAcR,KAAKD,GACxBiB,MAAMd,GAAiBC,QAAQE,OAAOH,KAI7Ce,CAVWJ,EAAIK,OAAOnB,MAUPoB,KAAKlB,IAGrBY,EAAIO,WACJC,KAAKC,UAAUrB,GAEnBsB,EAAAA,KAAKF,KAAKC,UAAUrB,MACvBe,MAAMQ,IACHD,EAAAA,KAAKF,KAAKC,UAAU,CACd,QAAA,EACFT,KAAAA,EAAIO,WACDI,QAAAA,SAKfd,EAAOE,KAAK,IAAK,CAACC,EAAKC,IAAQA,EAAIW,KAAK,OACxCnB,OAAOC,QAAUG;;ACnDjB,MAAMgB,EAAU9B,QAAQ,mBAClB+B,EAAK/B,QAAQ,MACbgC,EAAOhC,QAAQ,QAEfiC,EAAW,KAKRC,OAJMH,EAAGI,YACdH,EAAKI,KAAKC,UAAW,sBAGXC,IAAIC,GAAQP,EAAKI,KAAKC,UAAW,qBAAuBE,KAGhEC,EAAcC,IACZC,MAAAA,EAROX,EAAGI,YACdH,EAAKI,KAAKC,UAAW,sBAGXC,IAAIC,GAAQP,EAAKI,KAAKC,UAAW,qBAAuBE,IAM5DI,QAAAA,IAAID,GAEJE,EAAAA,KAAKH,EAAKI,IAAK,CACT,WAAA,MACI,eAAA,MACJ,WAAA,QACC,YAAA,YACFb,UAAAA,EAAKI,KAAKC,UAAW,cACtB,SAAA,wBACJK,KAAAA,EACM,WAAA,CAACzB,EAAKC,UAItBR,OAAOC,QAAU6B;;AC7BjB,MAAM3B,EAAUb,QAAQ,WAClB8C,EAAY9C,QAAQ,8BACpBwC,EAAcxC,QAAQ,oBAEtB6C,EAAMhC,IAEZ2B,EAAY,CAACK,IAAAA,IACbA,EAAIE,IAAI,aAAcD,GAEtBD,EAAIG,QAAQC,MAAMC,QAAQ,SAASC,GAC7BA,EAAEC,OAASD,EAAEC,MAAMpB,MACbW,QAAAA,IAAIQ,EAAEC,MAAMpB,QAIxBa,EAAIE,IAAI,CAAC9B,EAAKC,EAAKmC,KACbC,EAAAA,OAAO,8BAA+B,KACtCA,EAAAA,OAAO,+BAAgC,kDAC3CD,MAGF3C,OAAOC,QAAUkC,EAAIU,OAAO","file":"app.map","sourceRoot":"..","sourcesContent":["const Docker = require('dockerode');\n\nconst docker = new Docker({\n  socketPath: '/var/run/docker.sock'\n});\n\nconst dockerPullPromise = name => {\n  docker.pull(name, (stream, error) => {\n    return new Promise((resolve, reject) => {\n      if(error) reject(error);\n      resolve(stream);\n    });\n  });\n};\n\nmodule.exports = {\n  pull: dockerPullPromise\n}","const dockerPromise = require('../middleware/docker-promise');\nconst express = require('express');\nconst router = express.Router();\n\n/**\n * @swagger\n * /container/create:\n *   post:\n *     description: Create container based on pushed images to docker Hub\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: ayamaruyama/hello:robaas\n *         description: pushed container name\n *         in: formData\n *         required: true\n *         type: string\n *     responses:\n *       200:\n *         description: succeeded\n *       500:\n *         description: error\n */\nrouter.post('/create/:name', (req, res) => {\n  const containerName = req.params.name;\n  const dockerPull = async name => {\n    if(name.match(/(.+):robaas/) === null) {\n       return Promise.reject(\"This image is not adapted to RoBaaS\"); \n    }\n    const stream = await dockerPromise.pull(name)\n                   .catch(error =>{ return Promise.reject(error) });\n    return stream;\n  };\n\n  dockerPull(containerName).then(stream => {\n    const response = {\n      status: true,\n      code: req.statusCode,\n      info: JSON.stringify(stream)\n    }\n    res.json(JSON.stringify(stream));\n  }).catch(message => {\n    res.json(JSON.stringify({\n      status: false,\n      code: req.statusCode,\n      message: message\n    }));\n  })\n});\n\nrouter.post('/', (req, res) => res.send(\"aa\"));\nmodule.exports = router;\n","const swagger = require('swagger-express');\nconst fs = require('fs');\nconst path = require('path');\n\nconst getFiles = () => {\n  const list = fs.readdirSync(\n    path.join(__dirname, '../config/routing')\n  );\n\n  return list.map(file => path.join(__dirname, '../config/routing/' + file));\n};\n\nconst swaggerInit = args => {\n  const apis = getFiles();\n\n  console.log(apis);\n  \n  swagger.init(args.app, {\n    apiVersion: '1.0',\n    swaggerVersion: '1.0',\n    swaggerURL: '/docs',\n    swaggerJSON: '/api-docs',   \n    swaggerUI: path.join(__dirname, '../swagger'),        \n    basePath: 'http://localhost:3000',\n    apis: apis,\n    middleware: (req, res) => {}\n  })\n}\n\nmodule.exports = swaggerInit;","const express = require('express');\nconst container = require('./config/routing/container');\nconst swaggerInit = require('./config/swagger');\n\nconst app = express();\n\nswaggerInit({app});\napp.use('/container', container);\n\napp._router.stack.forEach(function(r){\n  if (r.route && r.route.path){\n    console.log(r.route.path)\n  }\n})\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\nmodule.exports = app.listen(3000);\n"]}