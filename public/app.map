{"version":3,"sources":["config/middleware/docker-promise.js","config/routing/container.js","app.js"],"names":["Docker","require","docker","dockerPullPromise","name","pull","stream","error","Promise","resolve","reject","module","exports","dockerPromise","express","router","Router","post","req","res","match","catch","containerName","params","then","statusCode","JSON","stringify","json","message","swaggerDoc","container","swaggerOptions","app","swaggerSpec","use","next","header","listen"],"mappings":";AAAA,MAAMA,EAASC,QAAQ,aAEjBC,EAAS,IAAIF,EAAO,CACZ,WAAA,yBAGRG,EAAoBC,IACjBC,EAAAA,KAAKD,EAAM,CAACE,EAAQC,IAClB,IAAIC,QAAQ,CAACC,EAASC,KACxBH,GAAOG,EAAOH,GACTD,EAAAA,OAKdK,OAAOC,QAAU,CACTT,KAAAA;;AChBR,MAAMU,EAAgBZ,QAAQ,gCACxBa,EAAUb,QAAQ,WAClBc,EAASD,EAAQE,SAEvBD,EAAOE,KAAK,gBAAiB,CAACC,EAAKC,KAEd,OAAA,IAMVb,OAL0B,OAA9BF,EAAKgB,MAAM,gBACHV,QAAAA,OAAO,6CAEGG,EAAcR,KAAKD,GACxBiB,MAAMd,GAASC,QAAQE,OAAOH,KAIrCe,CAVWJ,EAAIK,OAAOnB,MAUPoB,KAAKlB,IAGrBY,EAAIO,WACJC,KAAKC,UAAUrB,GAEnBsB,EAAAA,KAAKF,KAAKC,UAAUrB,MACvBe,MAAMQ,IACHD,EAAAA,KAAKF,KAAKC,UAAU,CACd,QAAA,EACFT,KAAAA,EAAIO,WACDI,QAAAA,SAKflB,OAAOC,QAAUG;;AC/BjB,MAAMD,EAAUb,QAAQ,WAClB6B,EAAa7B,QAAQ,iBACrB8B,EAAY9B,QAAQ,8BAEpB+B,EAAiB,CACF,kBAAA,CACX,KAAA,CACG,MAAA,WAGL,KAAA,CAAC,eAGHC,EAAMnB,IACNoB,EAAcJ,EAAWE,GAE/BC,EAAIE,IAAI,aAAcJ,GAEtBE,EAAIE,IAAI,CAACjB,EAAKC,EAAKiB,KACbC,EAAAA,OAAO,8BAA+B,KACtCA,EAAAA,OAAO,+BAAgC,kDAC3CD,MAGFzB,OAAOC,QAAUqB,EAAIK,OAAO","file":"app.map","sourceRoot":"..","sourcesContent":["const Docker = require('dockerode');\n\nconst docker = new Docker({\n  socketPath: '/var/run/docker.sock'\n});\n\nconst dockerPullPromise = name => {\n  docker.pull(name, (stream, error) => {\n    return new Promise((resolve, reject) => {\n      if(error) reject(error);\n      resolve(stream);\n    });\n  });\n};\n\nmodule.exports = {\n  pull: dockerPullPromise\n}","const dockerPromise = require('../middleware/docker-promise');\nconst express = require('express');\nconst router = express.Router();\n\nrouter.post('/create/:name', (req, res) => {\n  const containerName = req.params.name;\n  const dockerPull = async name => {\n    if(name.match(/(.+):robaas/) === null) {\n       Promise.reject(\"This image is not adapted to RoBaaS\"); \n    }\n    const stream = await dockerPromise.pull(name)\n                   .catch(error => Promise.reject(error));\n    return stream;\n  };\n\n  dockerPull(containerName).then(stream => {\n    const response = {\n      status: true,\n      code: req.statusCode,\n      info: JSON.stringify(stream)\n    }\n    res.json(JSON.stringify(stream));\n  }).catch(message => {\n    res.json(JSON.stringify({\n      status: false,\n      code: req.statusCode,\n      message: message\n    }));\n  })\n});\n\nmodule.exports = router;\n","const express = require('express');\nconst swaggerDoc = require('swagger-jsdoc');\nconst container = require('./config/routing/container');\n\nconst swaggerOptions = {\n  swaggerDefinition: {\n    info: {\n      title: 'RoBaaS'\n    }\n  },\n  apis: ['./index.js']\n};\n\nconst app = express();\nconst swaggerSpec = swaggerDoc(swaggerOptions);\n\napp.use('/container', container);\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\nmodule.exports = app.listen(3000);\n"]}